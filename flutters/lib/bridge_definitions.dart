// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class Radd {
  Future<int> add({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddConstMeta;

  Future<String> greet({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGreetConstMeta;

  Future<MutexAutoCommit> newDoc({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewDocConstMeta;

  Future<MutexAutoCommit> loadDoc({required Uint8List bytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoadDocConstMeta;

  Future<Uint8List> saveDoc({required MutexAutoCommit mdoc, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSaveDocConstMeta;

  Future<MutexAutoCommit> forkDoc(
      {required MutexAutoCommit mdoc, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kForkDocConstMeta;

  Future<MutexAutoCommit> mergeDoc(
      {required MutexAutoCommit mdoc1,
      required MutexAutoCommit mdoc2,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMergeDocConstMeta;

  Future<MutexAutoCommit> withRandomActor(
      {required MutexAutoCommit mdoc, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWithRandomActorConstMeta;

  Future<MutexAutoCommit> reconcileContact(
      {required MutexAutoCommit mdoc, required Contact contact, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReconcileContactConstMeta;

  Future<Contact> hydrateContact({required MutexAutoCommit mdoc, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHydrateContactConstMeta;

  DropFnType get dropOpaqueMutexAutoCommit;
  ShareFnType get shareOpaqueMutexAutoCommit;
  OpaqueTypeFinalizer get MutexAutoCommitFinalizer;
}

@sealed
class MutexAutoCommit extends FrbOpaque {
  final Radd bridge;
  MutexAutoCommit.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMutexAutoCommit;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMutexAutoCommit;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MutexAutoCommitFinalizer;
}

class Address {
  final String lineOne;
  final String? lineTwo;
  final String city;
  final String postcode;

  const Address({
    required this.lineOne,
    this.lineTwo,
    required this.city,
    required this.postcode,
  });
}

class Contact {
  final String name;
  final Address address;

  const Contact({
    required this.name,
    required this.address,
  });
}
