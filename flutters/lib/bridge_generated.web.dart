// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.79.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class RaddPlatform extends FlutterRustBridgeBase<RaddWire>
    with FlutterRustBridgeSetupMixin {
  RaddPlatform(FutureOr<WasmModule> dylib) : super(RaddWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  Object api2wire_MutexAutoCommit(MutexAutoCommit raw) {
    return raw.shareOrMove();
  }

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_address(Address raw) {
    return [
      api2wire_String(raw.lineOne),
      api2wire_opt_String(raw.lineTwo),
      api2wire_String(raw.city),
      api2wire_String(raw.postcode)
    ];
  }

  @protected
  List<dynamic> api2wire_box_autoadd_contact(Contact raw) {
    return api2wire_contact(raw);
  }

  @protected
  List<dynamic> api2wire_contact(Contact raw) {
    return [api2wire_String(raw.name), api2wire_address(raw.address)];
  }

  @protected
  String? api2wire_opt_String(String? raw) {
    return raw == null ? null : api2wire_String(raw);
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }
// Section: finalizer

  late final Finalizer<PlatformPointer> _MutexAutoCommitFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_MutexAutoCommit);
  Finalizer<PlatformPointer> get MutexAutoCommitFinalizer =>
      _MutexAutoCommitFinalizer;
}

// Section: WASM wire module

@JS('wasm_bindgen')
external RaddWasmModule get wasmModule;

@JS()
@anonymous
class RaddWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external RaddWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_add(NativePortType port_, int a, int b);

  external dynamic /* void */ wire_greet(NativePortType port_);

  external dynamic /* void */ wire_new_doc(NativePortType port_);

  external dynamic /* void */ wire_load_doc(
      NativePortType port_, Uint8List bytes);

  external dynamic /* void */ wire_save_doc(NativePortType port_, Object mdoc);

  external dynamic /* void */ wire_fork_doc(NativePortType port_, Object mdoc);

  external dynamic /* void */ wire_merge_doc(
      NativePortType port_, Object mdoc1, Object mdoc2);

  external dynamic /* void */ wire_with_random_actor(
      NativePortType port_, Object mdoc);

  external dynamic /* void */ wire_reconcile_contact(
      NativePortType port_, Object mdoc, List<dynamic> contact);

  external dynamic /* void */ wire_hydrate_contact(
      NativePortType port_, Object mdoc);

  external dynamic /*  */ drop_opaque_MutexAutoCommit(ptr);

  external int /* *const c_void */ share_opaque_MutexAutoCommit(ptr);
}

// Section: WASM wire connector

class RaddWire extends FlutterRustBridgeWasmWireBase<RaddWasmModule> {
  RaddWire(FutureOr<WasmModule> module)
      : super(WasmModule.cast<RaddWasmModule>(module));

  void wire_add(NativePortType port_, int a, int b) =>
      wasmModule.wire_add(port_, a, b);

  void wire_greet(NativePortType port_) => wasmModule.wire_greet(port_);

  void wire_new_doc(NativePortType port_) => wasmModule.wire_new_doc(port_);

  void wire_load_doc(NativePortType port_, Uint8List bytes) =>
      wasmModule.wire_load_doc(port_, bytes);

  void wire_save_doc(NativePortType port_, Object mdoc) =>
      wasmModule.wire_save_doc(port_, mdoc);

  void wire_fork_doc(NativePortType port_, Object mdoc) =>
      wasmModule.wire_fork_doc(port_, mdoc);

  void wire_merge_doc(NativePortType port_, Object mdoc1, Object mdoc2) =>
      wasmModule.wire_merge_doc(port_, mdoc1, mdoc2);

  void wire_with_random_actor(NativePortType port_, Object mdoc) =>
      wasmModule.wire_with_random_actor(port_, mdoc);

  void wire_reconcile_contact(
          NativePortType port_, Object mdoc, List<dynamic> contact) =>
      wasmModule.wire_reconcile_contact(port_, mdoc, contact);

  void wire_hydrate_contact(NativePortType port_, Object mdoc) =>
      wasmModule.wire_hydrate_contact(port_, mdoc);

  dynamic /*  */ drop_opaque_MutexAutoCommit(ptr) =>
      wasmModule.drop_opaque_MutexAutoCommit(ptr);

  int /* *const c_void */ share_opaque_MutexAutoCommit(ptr) =>
      wasmModule.share_opaque_MutexAutoCommit(ptr);
}
